//  UserUtils.swift
//  BaseCoreImpl
//
//  Created by Huy Trinh Duc on 16/01/2023.
//  Copyright (c) 2023 Educa Corp. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by huyparody - huytd@educa.vn

import Foundation
import BaseCore


/// Allows to match for optionals with generics that are defined as non-optional.
public protocol AnyOptional {
    /// Returns `true` if `nil`, otherwise `false`.
    var isNil: Bool { get }
}
extension Optional: AnyOptional {
    public var isNil: Bool { self == nil }
}

@propertyWrapper
struct Storage<Value> {
    let key: String
    let defaultValue: Value
    var container: UserDefaults = .standard

    var wrappedValue: Value {
        get {
            return container.object(forKey: key) as? Value ?? defaultValue
        }
        set {
            // Check whether we're dealing with an optional and remove the object if the new value is nil.
            if let optional = newValue as? AnyOptional, optional.isNil {
                container.removeObject(forKey: key)
            } else {
                container.set(newValue, forKey: key)
            }
        }
    }

    var projectedValue: Bool {
        return true
    }
}

public struct UserUtils {
    
    struct UserDefaultKey {
        static let Theme = "theme"
        static let TokenLogin = "accessToken"
        static let RefreshToken = "refreshToken"
        static let TimeTokenExpire = "timeTokenExpire"
    }
    
    @Storage(key: UserUtils.UserDefaultKey.TokenLogin, defaultValue: "")
    static var accessToken: String
    
    @Storage(key: UserUtils.UserDefaultKey.RefreshToken, defaultValue: "")
    static var refreshToken: String
    
    @Storage(key: UserUtils.UserDefaultKey.TimeTokenExpire, defaultValue: Date().localDate())
    static var timeTokenWillExpire: Date
    
    //MARK: User tokens
    
    static func tokenWillExpiredAt() -> Date {
        //Token expire trong 15 phÃºt
        return Date().localDate().plusMinutes(15)
    }
    
    static func isLoggedIn () -> Bool {
        return !UserUtils.accessToken.isEmpty
    }
    
    static func saveTokens(accessToken: String, refreshToken: String) {
        UserUtils.accessToken = accessToken
        UserUtils.refreshToken = refreshToken
        UserUtils.timeTokenWillExpire = UserUtils.tokenWillExpiredAt()
    }
    
    static func removeTokens() {
        UserDefaults.standard.removeObject(forKey: UserUtils.UserDefaultKey.TokenLogin)
        UserDefaults.standard.removeObject(forKey: UserUtils.UserDefaultKey.RefreshToken)
        UserDefaults.standard.removeObject(forKey: UserUtils.UserDefaultKey.TimeTokenExpire)
    }
    
}
