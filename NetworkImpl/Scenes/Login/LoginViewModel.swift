//  LoginViewModel.swift
//  NetworkImpl
//
//  Created by Huy Trinh Duc on 17/01/2023.
//  Copyright (c) 2023 Educa Corp. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by huyparody - huytd@educa.vn

import Foundation
import RxSwift
import RxCocoa
import XCoordinator
import UIKit
import BaseCore

class LoginViewModel: EducaViewModel {
    
    struct Input {
//        let viewDidLoad: Driver<Void>
        let retryTrigger: Driver<Void>
        let testCallTrigger: Driver<Void>
    }
    
    struct Output {
        let testOutput: Driver<Int>
        let test: Driver<Void>
    }
    
    private let useCase: DummyUseCase
    private let router: UnownedRouter<LoginRoute>
    private let bag = DisposeBag()
    
    init(router: UnownedRouter<LoginRoute>, useCase: DummyUseCase) {
        self.router = router
        self.useCase = useCase
    }
    
    func transform(input: Input) -> Output {
        
//        let testOutput = input.viewDidLoad
//            .flatMapLatest { _ in
//                return self
//                    .useCase
//                    .getDummy()
//                    .compactMap({$0.userId})
//                    .asDriverOnErrorJustComplete()
//            }
        
        let testOutput = input.retryTrigger
            .flatMapLatest { _ in
                return self
                    .useCase
                    .getDummy()
                    
                    .asDriverOnErrorJustComplete()
            }
            .compactMap({$0.userId})
        
        let test = input.testCallTrigger
            .flatMapLatest { _ in
                return self
                    .useCase
                    .getDummy()
                    .asDriverOnErrorJustComplete()
                    .mapToVoid()
            }
        

        
        //            .subscribe(onNext: { data in
        //                print(data.accessToken ?? "")
        //                if !(data.accessToken?.isEmpty ?? false) {
        //                    self.router.trigger(.home)
        //                }
        //            })
        //            .disposed(by: bag)
        
        return Output(testOutput: testOutput, test: test)
    }
}
